generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model AulaEscola {
  id             String           @id
  data_aula      DateTime
  status         String
  turmaEscolaId  String?
  date_create    DateTime         @default(now())
  date_update    DateTime
  turma_escola   turma_escola?    @relation(fields: [turmaEscolaId], references: [id])
  PresencaEscola PresencaEscola[]
}

model PresencaCulto {
  id                String            @id
  status            Boolean
  userId            String?
  cultoIndividualId String?
  date_create       DateTime          @default(now())
  date_update       DateTime
  culto_individual  culto_individual? @relation(fields: [cultoIndividualId], references: [id], onDelete: Cascade)
  user              user?             @relation(fields: [userId], references: [id])
}

model PresencaEscola {
  id           String      @id
  status       String
  userId       String?
  aulaEscolaId String?
  date_create  DateTime    @default(now())
  date_update  DateTime
  AulaEscola   AulaEscola? @relation(fields: [aulaEscolaId], references: [id])
  user         user?       @relation(fields: [userId], references: [id])
}

model PresencaReuniaoCelula {
  id              String          @id
  status          Boolean
  userId          String?
  reuniaoCelulaId String?
  date_create     DateTime        @default(now())
  date_update     DateTime
  reuniao_celula  reuniao_celula? @relation(fields: [reuniaoCelulaId], references: [id], onDelete: Cascade)
  user            user?           @relation(fields: [userId], references: [id])
}

model RoleNew {
  id   String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name String @db.VarChar(255)
}

model cargo_de_lideranca {
  id          String   @id
  nome        String
  date_create DateTime @default(now())
  date_update DateTime
  user        user[]
}

model celula {
  id                         String           @id
  nome                       String
  cep                        String?
  cidade                     String?
  estado                     String?
  endereco                   String?
  date_inicio                DateTime?
  date_que_ocorre            String?
  date_multipicar            DateTime?
  date_create                DateTime         @default(now())
  date_update                DateTime
  supervisaoId               String
  userId                     String?
  numero_casa                String?
  bairro                     String?
  supervisao                 supervisao       @relation(fields: [supervisaoId], references: [id])
  user_celula_userIdTouser   user?            @relation("celula_userIdTouser", fields: [userId], references: [id])
  reuniao_celula             reuniao_celula[]
  user_user_celulaIdTocelula user[]           @relation("user_celulaIdTocelula")
}

model culto_geral {
  id            String          @id
  nome          String
  descricao     String?
  date_create   DateTime        @default(now())
  date_update   DateTime
  culto_semanal culto_semanal[]
}

model culto_individual {
  id                 String          @id
  data_inicio_culto  DateTime
  data_termino_culto DateTime
  status             String
  cultoSemanalId     String?
  date_create        DateTime        @default(now())
  date_update        DateTime
  PresencaCulto      PresencaCulto[]
  culto_semanal      culto_semanal?  @relation(fields: [cultoSemanalId], references: [id])
}

model culto_semanal {
  id               String             @id
  nome             String
  descricao        String?
  cultoGeralId     String?
  date_create      DateTime           @default(now())
  date_update      DateTime
  culto_individual culto_individual[]
  culto_geral      culto_geral?       @relation(fields: [cultoGeralId], references: [id])
}

model discipulado {
  discipulado_id       String               @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  usuario_id           String
  discipulador_id      String
  data_ocorreu         DateTime             @db.Date
  discipulador_usuario discipulador_usuario @relation(fields: [usuario_id, discipulador_id], references: [usuario_id, discipulador_id], onDelete: Cascade, onUpdate: NoAction)
}

model discipulador_usuario {
  usuario_id                                      String
  discipulador_id                                 String
  discipulado                                     discipulado[]
  user_discipulador_usuario_discipulador_idTouser user          @relation("discipulador_usuario_discipulador_idTouser", fields: [discipulador_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user_discipulador_usuario_usuario_idTouser      user          @relation("discipulador_usuario_usuario_idTouser", fields: [usuario_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([usuario_id, discipulador_id])
}

model encontros {
  id          String   @id
  nome        String
  descricao   String?
  date_create DateTime @default(now())
  date_update DateTime
  user        user[]   @relation("EncontrosToUser")
}

model escola {
  id                       String         @id
  nome                     String
  descricao                String?
  userId                   String?
  date_create              DateTime       @default(now())
  date_update              DateTime
  user_escola_userIdTouser user?          @relation("escola_userIdTouser", fields: [userId], references: [id])
  turma_escola             turma_escola[]
  user_EscolaToUser        user[]         @relation("EscolaToUser")
}

model licao_celula {
  id                String             @id
  titulo            String
  versiculo_cahve   String
  link_objeto_aws   String?
  data_inicio       DateTime
  data_termino      DateTime
  date_create       DateTime           @default(now())
  date_update       DateTime
  temaLicaoCelulaId String?
  tema_licao_celula tema_licao_celula? @relation(fields: [temaLicaoCelulaId], references: [id], onDelete: Cascade)
}

model nivel_supervisao {
  id          String       @id
  nome        String
  descricao   String?
  date_create DateTime     @default(now())
  date_update DateTime
  supervisao  supervisao[]
}

model refresh_token {
  id            String @id
  expiresIn     Int
  userIdRefresh String @unique
  user          user   @relation(fields: [userIdRefresh], references: [id])
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model reuniao_celula {
  id                    String                  @id
  data_reuniao          DateTime?
  status                String
  celulaId              String?
  date_create           DateTime                @default(now())
  date_update           DateTime
  visitantes            Int?
  almas_ganhas          Int?
  PresencaReuniaoCelula PresencaReuniaoCelula[]
  celula                celula?                 @relation(fields: [celulaId], references: [id], onDelete: Cascade)
}

model rolenew {
  id         String       @id @default(dbgenerated("gen_random_uuid()"))
  name       String?
  user_roles user_roles[]
}

model session {
  id           String   @id
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         user     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model situacao_no_reino {
  id          String   @id
  nome        String
  date_create DateTime @default(now())
  date_update DateTime
  user        user[]
}

model supervisao {
  id                                 String            @id
  nome                               String
  cor                                String
  date_create                        DateTime          @default(now())
  date_update                        DateTime
  nivelSupervisaoId                  String?
  userId                             String?
  celula                             celula[]
  nivel_supervisao                   nivel_supervisao? @relation(fields: [nivelSupervisaoId], references: [id])
  user_supervisao_userIdTouser       user?             @relation("supervisao_userIdTouser", fields: [userId], references: [id])
  user_user_supervisaoIdTosupervisao user[]            @relation("user_supervisaoIdTosupervisao")
}

model tema_licao_celula {
  id              String         @id
  tema            String
  link_folder_aws String?
  data_inicio     DateTime
  data_termino    DateTime
  date_create     DateTime       @default(now())
  date_update     DateTime
  licao_celula    licao_celula[]
}

model tokens {
  id          String    @id
  type        TokenType
  date_create DateTime  @default(now())
  userId      String
  user        user      @relation(fields: [userId], references: [id])
}

model turma_escola {
  id             String       @id
  nome           String
  descricao      String?
  date_inicio    DateTime?
  date_conclusao DateTime?
  userId         String?
  escolaId       String?
  date_create    DateTime     @default(now())
  date_update    DateTime
  AulaEscola     AulaEscola[]
  escola         escola?      @relation(fields: [escolaId], references: [id])
  user           user[]
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model user {
  id                                                              String                  @id
  image_url                                                       String?
  email                                                           String                  @unique
  first_name                                                      String
  last_name                                                       String?
  cpf                                                             String?
  date_nascimento                                                 DateTime?
  sexo                                                            String?
  telefone                                                        String?
  escolaridade                                                    String?
  profissao                                                       String?
  estado_civil                                                    String?
  nome_conjuge                                                    String?
  has_filho                                                       Boolean
  batizado                                                        Boolean
  is_discipulado                                                  Boolean
  discipuladorId                                                  String?
  date_casamento                                                  DateTime?
  date_batizado                                                   DateTime?
  date_decisao                                                    DateTime?
  date_create                                                     DateTime                @default(now())
  date_update                                                     DateTime
  password                                                        String?
  turmaEscolaId                                                   String?
  cep                                                             String?
  cidade                                                          String?
  endereco                                                        String?
  estado                                                          String?
  numero_casa                                                     String?
  bairro                                                          String?
  cargoDeLiderancaId                                              String?
  celulaId                                                        String?
  situacaoNoReinoId                                               String?
  supervisaoId                                                    String?
  quantidade_de_filho                                             Int?
  role                                                            Role                    @default(MEMBER)
  userIdRefresh                                                   String?
  role_id                                                         String?
  PresencaCulto                                                   PresencaCulto[]
  PresencaEscola                                                  PresencaEscola[]
  PresencaReuniaoCelula                                           PresencaReuniaoCelula[]
  celula_celula_userIdTouser                                      celula[]                @relation("celula_userIdTouser")
  discipulador_usuario_discipulador_usuario_discipulador_idTouser discipulador_usuario[]  @relation("discipulador_usuario_discipulador_idTouser")
  discipulador_usuario_discipulador_usuario_usuario_idTouser      discipulador_usuario[]  @relation("discipulador_usuario_usuario_idTouser")
  escola_escola_userIdTouser                                      escola[]                @relation("escola_userIdTouser")
  refresh_token                                                   refresh_token?
  session                                                         session[]
  supervisao_supervisao_userIdTouser                              supervisao[]            @relation("supervisao_userIdTouser")
  tokens                                                          tokens[]
  cargo_de_lideranca                                              cargo_de_lideranca?     @relation(fields: [cargoDeLiderancaId], references: [id])
  celula_user_celulaIdTocelula                                    celula?                 @relation("user_celulaIdTocelula", fields: [celulaId], references: [id])
  user                                                            user?                   @relation("userTouser", fields: [discipuladorId], references: [id], map: "user_discipuladorid_fkey")
  other_user                                                      user[]                  @relation("userTouser")
  situacao_no_reino                                               situacao_no_reino?      @relation(fields: [situacaoNoReinoId], references: [id])
  supervisao_user_supervisaoIdTosupervisao                        supervisao?             @relation("user_supervisaoIdTosupervisao", fields: [supervisaoId], references: [id])
  turma_escola                                                    turma_escola?           @relation(fields: [turmaEscolaId], references: [id])
  user_roles                                                      user_roles[]
  encontros                                                       encontros[]             @relation("EncontrosToUser")
  escola_EscolaToUser                                             escola[]                @relation("EscolaToUser")
}

model user_roles {
  user_id String
  role_id String
  rolenew rolenew @relation(fields: [role_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user    user    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([user_id, role_id])
}

enum Role {
  USERLIDER
  USERSUPERVISOR
  USERCENTRAL
  USERPASTOR
  MEMBER
  ADMIN
}

enum TokenType {
  PASSWORD_RECOVER
}

enum role {
  USERLIDER
  USERSUPERVISOR
  USERCENTRAL
  USERPASTOR
  MEMBER
  ADMIN
}
